plugins {
    id 'com.android.application'
}

android {
    compileSdk 33

    defaultConfig {
        applicationId "com.ieiworld.ieilightbar"
        minSdk 21
        targetSdk 33
        versionCode
        versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags ''
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        viewBinding true
    }
    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.18.1'
        }
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.4.1"
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

updateVersion()

def updateVersion() {
    def propertiesFile = file('build.properties')
    Properties properties = readProperties(propertiesFile)

    def versionMajor = properties['version_major'].toString().toInteger()
    def versionMinor = properties['version_minor'].toString().toInteger()
    def versionPatch = properties['version_patch'].toString().toInteger()
    def versionBuild = properties['version_build'].toString().toInteger()
    def versionStore = properties['version_store'].toString().toInteger()

    if (isReleaseTask()) {
        System.out.println(">>> Building Release...")
        versionPatch++
        versionStore++
        versionBuild = 0
        properties['version_patch'] = versionPatch.toString()
        properties['version_store'] = versionStore.toString()
        properties['version_build'] = versionBuild.toString()
        writeProperties(propertiesFile, properties)
    }
    if (isCompileTask()) {
        System.out.println(">>> Compiling Source...")
        versionBuild++
        properties['version_build'] = versionBuild.toString()
        writeProperties(propertiesFile, properties)
    }

    def versionName = "${versionMajor}.${versionMinor}.${versionPatch}"
    def applicationId = android.defaultConfig.applicationId
    if (!isReleaseTask()) {
        versionName = versionName + ".${versionBuild}"
        applicationId = applicationId + android.buildTypes.debug.applicationIdSuffix
    }
    System.out.println(">>> " + project.parent.name + " " + versionName + " (" + versionStore + ") '" + applicationId + "'")
    android.defaultConfig.versionCode = versionStore
    android.defaultConfig.versionName = versionName
}

def isCompileTask() {
    def tasks = gradle.getStartParameter().getTaskNames()
    return ':app:generateDebugSources' in tasks || ':app:generateReleaseSources' in tasks ||
            'generateDebugSources' in tasks || 'generateReleaseSources' in tasks ||
            ':app:assembleDebug' in tasks
}

def isReleaseTask() {
    def tasks = gradle.getStartParameter().getTaskNames()
    return ':app:assembleRelease' in tasks || 'assembleRelease' in tasks
}

static Properties readProperties(propertiesFile) {
    if (propertiesFile.canRead()) {
        Properties properties = new Properties()
        def inputStream = new FileInputStream(propertiesFile)
        properties.load(inputStream)
        inputStream.close()
        return properties
    } else {
        def message = ">>> Could not read " + propertiesFile.name + " file!"
        System.err.println(message)
        throw new GradleException(message)
    }
}

def static writeProperties(propertiesFile, properties) {
    def writer = propertiesFile.newWriter()
    properties.store(writer, "Build Properties")
    writer.close()
}